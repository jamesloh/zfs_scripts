#!/usr/bin/env python3
#
# zfSnap Copyright (c) 2009 James Loh
# 1 Jan 2022 Modified for Python 3
#
#   Permission is hereby granted, free of charge, to any person
#   obtaining a copy of this software and associated documentation files
#   (the "Software"), to deal in the Software without restriction,
#   including without limitation the rights to use, copy, modify, merge,
#   publish, distribute, sublicense, and/or sell copies of the Software,
#   and to permit persons to whom the Software is furnished to do so,
#   subject to the following conditions:
#
#   The above copyright notice and this permission notice shall be
#   included in all copies or substantial portions of the Software.
#
#   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS 
#   OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
#   MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
#   IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY 
#   CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
#   TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
#   SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE. 

"""
zfSnap (pronounced as "zed eff snap") simplifies snapshot interface

  Usage: zfSnap dataset_name [mnemonic_name]

  Examples:
    zfSnap rpool/secureds b4_alter_customer_table

    or put this in crontab
      * 0 * * * zfSnap rpool/secureds # cp zfSnap /usr/sbin

"""
from datetime import datetime
import subprocess

def now_snapshot_time():
  now = datetime.now()
  return now.strftime("%Y%m%d_%H%M%S_%a_%w")

def usage():
  print(__doc__)
  sys.exit(2)

def snapshot(dataset, snapshot_name):
  snapshot_cmd = "zfs snapshot -r " + dataset + "@" + snapshot_name
  print(snapshot_cmd)
  cp = subprocess.run([snapshot_cmd], shell=True, universal_newlines=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
  print(cp.stdout)
  print(cp.stderr)


import sys
narg = len(sys.argv)
if narg == 1: # program name and dataset name
  usage()
if narg > 3: # program name, dataset name and mnemonic
  usage()

dataset = sys.argv[1]
if narg == 2:
  snapshot(dataset, now_snapshot_time())
elif narg == 3:
  snapshot(dataset, "%s-%s" % (now_snapshot_time(), sys.argv[2]))
